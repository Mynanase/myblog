[{"content":"\r#\rstack 主题文档\r#\rfrontmatter configs\r#\rdiscription\rtype: string 对文章的描述 #\rimage\r#\rcommets\rType: bool #\rlicense\rType: string|bool 一般情况下 False 隐藏就好 #\rmath\rType: bool 使用 KaTeX 进行渲染 #\rtoc\rType: bool 确保该页面至少有一个一级标题 #\rreadingtime\rType: bool #\rshortcodes\r首先, shortcodes 是 hugo 设计的一种文本语法, hugo 会渲染相应内容成网页内容. 而 stack 主题就预先设计了一些语法.\n#\rbilibili video\r#\rtencent video\r1 {{\u0026lt; tencent VIDEO_ID \u0026gt;}} #\rYouTube video\r1 {{\u0026lt; youtube VIDEO_ID \u0026gt;}} #\rVideo file\r1 2 {{\u0026lt; video VIDEO_URL \u0026gt;}} {{\u0026lt; video src=\u0026#34;VIDEO_URL\u0026#34; autoplay=\u0026#34;true\u0026#34; poster=\u0026#34;./video-poster.png\u0026#34; \u0026gt;}} 这里的VIDEO_ID可以是相对路径和绝对路径.\n#\rGitLab\r1 {{\u0026lt; gitlab SNIPPET_ID \u0026gt;}} #\rQuote\r1 2 3 {{\u0026lt; quote author=\u0026#34;A famous person\u0026#34; source=\u0026#34;The book they wrote\u0026#34; url=\u0026#34;https://en.wikipedia.org/wiki/Book\u0026#34; \u0026gt;}} content {{\u0026lt; /quote \u0026gt;}} #\rwidgets\r利用 widgets 可以实现一些特殊的界面.\n#\rarchives\r使用 layout: archives 即可创建一个按照年份排列的清单页面. 使用参数 limits 控制展示年份的数目. #\rsearch\rlayout: search #\rcategories\r展示类别 limits 设置最大展示数目. #\rtoc\r#\rtag-cloud\rlimits 设置最大展示数目. #\r文件结构\r利用组件则可以自定义界面以及内容管理了. page 文件夹. 像主页, 关于等组件, [[它们本事就是由]] .md 形成的页面, 由于在 yaml 区添加了 layout 指令使它们同时能够作为组件存在. #\r发布设置\r待发布的文件放在 ./content/post 下 官网推荐每个 .md 和相关附件绑定在一起发布, 不过我已经准备了 [[obsidian 图床|图床]], 就没有必要了. 直接将所有文件存在该目录下. 现在编辑文件的 yaml.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 title: \u0026#39;001\u0026#39; description: date: 2024-04-01T12:52:10+08:00 image: math: true # 默认 true license: false # 默认 false categories: - category1 - category2 tags: - tag1 - tag2 comments: true draft: false # 默认 false 综上, 结合 obsidian 的基本配置, yaml 区基本模板为\n1 2 3 4 5 6 7 8 title: date: image: tags: categories: commets: description: share: ","date":"2024-04-02T08:00:00+08:00","permalink":"http://localhost:1313/p/hugo-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/","title":"hugo 博客搭建"}]